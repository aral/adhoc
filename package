#!/usr/bin/env python

######################################################################
#
# Ad Hoc iPhone App Packager (adhoc) Version 1.0 by Aral Balkan
# Copyright (c) 2009 Aral Balkan. http://aralbalkan.com
# Released under the MIT License.
#
# Packages an Ad Hoc distribution without any configuration. 
#
# Usage:
# 
#	1. Copy the adhoc folder into your Xcode project folder
#	2. Make an Ad Hoc distribution build in Xcode
#   3. Run ./adhoc/package [ConfigurationName]
#
#   If you leave out [ConfigurationName], adhoc will default
#   to the configuration name "Distribution" (without quotes)
#
#   Your Ad Hoc IPA file and the correct provisioning profile to 
#   send to your beta testers will be in the 
#   adhoc/packages/<AppVersion>/ folder.
#
#   The dSYM file (which you can use to desymbolize crash reports
#   from your beta testers) will also be backed up to the 
#   same folder. Do not send this to your beta testers. 
#
#   For more info on dSYM files, see:
#   http://furbo.org/2008/08/08/symbolicatifination/
#
# Notes:
#
#   * If you want a custom icon in your IPA file, create a 
#     512x512 PNG/JPG, save it as "iTunesArtwork" (without an
#     extension, and without the quotes), and copy it into the
#     root folder of your project. 
#
#
######################################################################

import os
import sys
import re

# The exit status for success in Unix system utilities is zero.
SUCCESS = 0

#
# Use either the default Configuration name or the one 
# provided by the user.
#
numArgs = len(sys.argv)
if (numArgs == 1):
	configurationName = "Distribution"
elif (numArgs == 2):
	configurationName = sys.argv[1]
else:
	print "Error: Incorrect syntax: too many arguments."
	print "Usage: adhoc/package [ConfigurationName]"

#
# Find the Xcode project and store its name.
#

xcodeFileName = os.popen('find *.xcodeproj -maxdepth 0 2>/dev/null').read().strip()

if (xcodeFileName == ""):
	print "Error: Could not find your Xcode project."
	print "Fix: Copy the adhoc folder to your Xcode project folder and run it from there with ./adhoc/package"
	exit()

# Strip the extension to get the project name.
projectName = xcodeFileName[0:-10]

#
# Get the App version from from the pList file.
#

infoPListFileName = "%s-Info.plist" % projectName
infoPList = open(infoPListFileName).read()

appVersionRegex = re.compile("CFBundleVersion<\/key>\n\t<string>(.*?)<\/string>")
appVersionRegexResults = re.findall(appVersionRegex, infoPList)
numAppVersionRegexResults = len(appVersionRegexResults)

if (numAppVersionRegexResults == 1):
	appVersion = appVersionRegexResults[0]
elif (numAppVersionRegexResults > 1):
	# Highly unlikely :) 
	print "Error: Found more than one CFBundleVersion entry in %s" % infoPListFileName
	exit()
else:	
	print "Error: Could not find CFBundleVersion in %s" % infoPListFileName
	exit()
	
#
# Preliminary sanity checks
#	
	
appPath = "build/%s-iphoneos/%s.app" % (configurationName, projectName)
dSYMPath = "build/%s-iphoneos/%s.app.dSYM" % (configurationName, projectName)

if not os.path.exists(appPath):
	print "Error: Could not find your app at %s." % appPath
	exit()

if not os.path.exists(dSYMPath):
	print "Error: Could not find the dSYM file at %s." % dSYMPath
	exit()

iTunesArtworkExists = os.path.exists("iTunesArtwork")	
if not iTunesArtworkExists:
	# Not a fail condition: warn user.
	print "Warning: iTunesArtwork file not found in root of the project folder. Your Ad Hoc distribution will not have an icon in iTunes."
	
print "Creating Ad Hoc distribution for %s version %s (configuration: %s)..." % (projectName, appVersion, configurationName)

#
# Create the package folder for this distribution and copy the 
# App file, iTuneArtwork, and dSYM file into it.
#

packageFolder = "adhoc/packages/%s" % appVersion
if (os.path.exists(packageFolder)):
	print "Error: Ad Hoc distribution for version %s already exists. Please update the version number in %s and make another build." % (appVersion, infoPListFileName)
	exit()
else:
	print "Making the package folder: %s..." % packageFolder

try:
	os.mkdir(packageFolder)
except OSError, e:
	print "Error: Could not create the package folder at %s" % packageFolder
	exit()
	
copyAppCommand = "cp -rp %s %s &> /dev/null" % (appPath, packageFolder)
copyDSYMCommand = "cp -rp %s %s &> /dev/null" % (dSYMPath, packageFolder)

copyAppResult = os.system(copyAppCommand)
if copyAppResult != SUCCESS:
	print "Error: Could not copy the app."
	print "Failed command: %s" % copyAppCommand
	exit()

copyDSYMResult = os.system(copyDSYMCommand)
if copyDSYMResult != SUCCESS:
	print "Error: Could not copy the dSYM file."
	print "Failed command: %s" % copyDSYMCommand
	exit()

if iTunesArtworkExists:
	copyITunesArtworkCommand = "cp iTunesArtwork %s &> /dev/null" % packageFolder
	copyITunesArtworkResult = os.system(copyITunesArtworkCommand)
	if copyITunesArtworkResult != SUCCESS:
		# Not a fail condition: warn user.
		print "Warning: Could not copy your iTunesArtwork file."
		print "Failed command: %s" % copyITunesArtworkCommand
else:
	print "Skipped copy for non-existent iTunesArtwork file."

#
# Find the correct mobile provisioning file from the project.pbxproj file.
#

pbxprojFileName = "%s.xcodeproj/project.pbxproj" % projectName
pbxproj = open(pbxprojFileName).read()

provisioningProfileUUIDRegEx = re.compile('(?s)/\* %s \*/ = {[^}]*?PROVISIONING_PROFILE.*? = "(.*?)";' % configurationName)

provisioningProfileUUIDList = re.findall(provisioningProfileUUIDRegEx, pbxproj)

numProvisioningProfileUUIDs = len(provisioningProfileUUIDList);
if (numProvisioningProfileUUIDs == 0):
	print "Error: Could not find the Unique ID for provisioning profile for configuration %s in project %s." (configurationName, pbxprojFileName)
	if (numArgs == 1):
		print "(You didn't specify a configuration name argument so the default, \"Distribution\" was used. If your distribution profile has a different name, please run this script again and pass the name as the argument.)"
	exit()
elif (numProvisioningProfileUUIDs > 1):
	print "Error: Found more than one Unique ID for provisioning profile for configuration %s. This is more than likely due to a bug in this script. Please email aral@aralbalkan.com your %s file to receive support." (configurationName, pbxprojFileName)
	exit()
	
provisioningProfileUUID = provisioningProfileUUIDList[0]
#print provisioningProfileUUID

#
# Find the provisioning profile with the matching UUID and copy it over to the package folder.
#

provisioningProfileFileName = os.path.expanduser("~/Library/MobileDevice/Provisioning Profiles/%s.mobileprovision" % provisioningProfileUUID)

# Shell commands require the path with the space escaped. os.path.exists requires it without the
# escaping. Otherwise, life is good.
provisioningProfileFileNameForShell = os.path.expanduser("~/Library/MobileDevice/Provisioning\ Profiles/%s.mobileprovision" % provisioningProfileUUID)

if (os.path.exists(provisioningProfileFileName)):
	copyProvisioningProfileCommand = "cp %s %s &> /dev/null" % (provisioningProfileFileNameForShell, packageFolder)
	
	#print copyProvisioningProfileCommand
	
	copyProvisioningProfileResult = os.system(copyProvisioningProfileCommand)
	if copyProvisioningProfileResult != SUCCESS:
		# Not a fail condition: warn user.
		print "Warning: Could not copy your provisioning profile. Make sure that you manually locate and send it to your beta testers."
		print "Failed command: %s" % copyProvisioningProfileCommand
		
else:
	
	# Not a fail condition: warn user.
	print "Warning: Could not find the mobile provisioning profile at %s. Make sure that you manually locate and send it to your beta testers." % provisioningProfileFileName

#
# Create the IPA
#

try:
	os.chdir(packageFolder)
except OSError, e:
	print "Error: could not change to the package folder at %s." % packageFolder
	exit()

try:
	os.mkdir("Payload")
except OSError, e:
	print "Error: could not make Payload folder."
	exit()

copyAppToPayloadCommand = "cp -rp \"%s\".app Payload/" % projectName

copyAppToPayloadResult = os.system(copyAppToPayloadCommand)
if copyAppToPayloadResult != SUCCESS:
	print "Error: Could not copy the app to the Payload folder."
	print "Failed command: %s" % copyAppToPayloadCommand
	exit()

zipIPACommand = 'zip -r "%s".ipa iTunesArtwork Payload &> /dev/null' % projectName
zipIPAResult = os.system(zipIPACommand)
if zipIPAResult != SUCCESS:
	print "Error: Could not zip the Payload folder to make the IPA."
	print "Failed command: %s" % zipIPACommand
	exit()


# Move the currently unnecessary files into a different folder so it doesn't get confusing.

try:
	os.mkdir("Backups")
	os.system("mv %s.app Backups" % projectName)
	os.system("mv %s.app.dSYM Backups" % projectName)
	os.system("mv iTunesArtwork Backups")
	os.system("rm -rf Payload")
except OSError, e:
	print "Warning: couldn't move files to the Backups folder."
	
# Open the folder in Finder.
os.system("open .")
	
#
# That's all folks!
#

print "Woot, we're done!\n"
print "The %s.ipa and %s.mobileprovision files are ready to send to\nyour beta testers.\n" % (projectName, provisioningProfileUUID)
print "Don't delete the .dSYM file as you will need it when your beta\ntesters send you crash reports.\n"
print "Good luck with your app! :)\n"
print "PS. If this little script helped you and you'd like to fuel my"
print "App Store addiction, why not send me a donation at http://bit.ly/4SADis"
print "(or simply some good vibes, comments, or suggestions to aral@aralbalkan.com).\n"

